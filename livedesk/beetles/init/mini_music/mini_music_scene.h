/*
* Copyright (c) 2019-2025 Allwinner Technology Co., Ltd. ALL rights reserved.
*
* Allwinner is a trademark of Allwinner Technology Co.,Ltd., registered in
* the the People's Republic of China and other countries.
* All Allwinner Technology Co.,Ltd. trademarks are used with permission.
*
* DISCLAIMER
* THIRD PARTY LICENCES MAY BE REQUIRED TO IMPLEMENT THE SOLUTION/PRODUCT.
* IF YOU NEED TO INTEGRATE THIRD PARTY’S TECHNOLOGY (SONY, DTS, DOLBY, AVS OR MPEGLA, ETC.)
* IN ALLWINNERS’SDK OR PRODUCTS, YOU SHALL BE SOLELY RESPONSIBLE TO OBTAIN
* ALL APPROPRIATELY REQUIRED THIRD PARTY LICENCES.
* ALLWINNER SHALL HAVE NO WARRANTY, INDEMNITY OR OTHER OBLIGATIONS WITH RESPECT TO MATTERS
* COVERED UNDER ANY REQUIRED THIRD PARTY LICENSE.
* YOU ARE SOLELY RESPONSIBLE FOR YOUR USAGE OF THIRD PARTY’S TECHNOLOGY.
*
*
* THIS SOFTWARE IS PROVIDED BY ALLWINNER"AS IS" AND TO THE MAXIMUM EXTENT
* PERMITTED BY LAW, ALLWINNER EXPRESSLY DISCLAIMS ALL WARRANTIES OF ANY KIND,
* WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION REGARDING
* THE TITLE, NON-INFRINGEMENT, ACCURACY, CONDITION, COMPLETENESS, PERFORMANCE
* OR MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
* IN NO EVENT SHALL ALLWINNER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS, OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#ifndef __MINI_MUSIC_SCENE_H__
#define __MINI_MUSIC_SCENE_H__

/*font define*/
#define SMALL_FONT_SIZE                     24
#define SMALL_FONT_FILE                     BEETLES_APP_ROOT"res\\fonts\\font24.sft"
#define BIG_FONT_SIZE                       32
#define BIG_FONT_FILE                       BEETLES_APP_ROOT"res\\fonts\\font32.sft"

typedef enum
{
    MINI_STC_ID_NAME = 0,
    MINI_STC_ID_TIME,
    MINI_STC_ID_NUM
} mini_static;

typedef enum
{
    MINI_BTN_ID_PRE = MINI_STC_ID_NUM,
    MINI_BTN_ID_NEXT,
    MINI_BTN_ID_PLAYPAUSE,
    MINI_BTN_ID_EXIT,
    MINI_BTN_ID_QUIT,
    MINI_BTN_ID_NUM
} mini_button;

/*typedef struct tag__MINI_ADD_DATA
{
    static_para_t *static_para;
    button_para_t *button_para;
}__mini_add_data_t;*/
typedef struct
{
    H_WIN       parent;         // 父窗口
    __s32       x;
    __s32       y;
} __mini_music_create_para_t;

H_WIN   scene_create(__mini_music_create_para_t *create_para);
__s32   scene_delete(void);
__bool  scene_exist(void);


#endif /* __MUSIC_SCENE_H__ */
