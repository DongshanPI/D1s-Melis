/*
* Copyright (c) 2019-2025 Allwinner Technology Co., Ltd. ALL rights reserved.
*
* Allwinner is a trademark of Allwinner Technology Co.,Ltd., registered in
* the the People's Republic of China and other countries.
* All Allwinner Technology Co.,Ltd. trademarks are used with permission.
*
* DISCLAIMER
* THIRD PARTY LICENCES MAY BE REQUIRED TO IMPLEMENT THE SOLUTION/PRODUCT.
* IF YOU NEED TO INTEGRATE THIRD PARTY’S TECHNOLOGY (SONY, DTS, DOLBY, AVS OR MPEGLA, ETC.)
* IN ALLWINNERS’SDK OR PRODUCTS, YOU SHALL BE SOLELY RESPONSIBLE TO OBTAIN
* ALL APPROPRIATELY REQUIRED THIRD PARTY LICENCES.
* ALLWINNER SHALL HAVE NO WARRANTY, INDEMNITY OR OTHER OBLIGATIONS WITH RESPECT TO MATTERS
* COVERED UNDER ANY REQUIRED THIRD PARTY LICENSE.
* YOU ARE SOLELY RESPONSIBLE FOR YOUR USAGE OF THIRD PARTY’S TECHNOLOGY.
*
*
* THIS SOFTWARE IS PROVIDED BY ALLWINNER"AS IS" AND TO THE MAXIMUM EXTENT
* PERMITTED BY LAW, ALLWINNER EXPRESSLY DISCLAIMS ALL WARRANTIES OF ANY KIND,
* WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION REGARDING
* THE TITLE, NON-INFRINGEMENT, ACCURACY, CONDITION, COMPLETENESS, PERFORMANCE
* OR MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
* IN NO EVENT SHALL ALLWINNER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS, OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#ifndef __SETTING_POWER_H_
#define __SETTING_POWER_H_

#include "app_setting_i.h"
typedef struct tag_setting_power_para
{
    GUI_FONT *font;

    H_LYR layer;
    __s32 focus_id;
    __s32 old_focus;

} setting_power_para_t;

typedef enum
{
    BLACKLIGHT_ITEM_RES_ID = 0,
    SCREEN_OFF_ITEM_RES_ID,
    POWER_OFF_ITEM_RES_ID,

    POWER_ITEM_MAX_ID,
} power_res_item_id_e ;

typedef enum power_paint_index
{
    ID_PAINTING_INIT_POWER,
    ID_PAINTING_F_GENERAL,
} draw_power_index_e;


typedef enum
{
    //POWER_THEME_BG_BMP_ID  = 0 ,  // 背景图
    //POWER_THEME_SETTING_ICON_BMP_ID , //设置图标
    //POWER_THEME_RETURN_FCS_BMP_ID ,
    //POWER_THEME_RETURN_UNFCS_BMP_ID ,

    NEW_SET_FLAG_UF_BMP = 0,    // BYF
    NEW_SET_FLAG_F_BMP,     //
    NEW_POWER_FLAG_UF_BMP,
    NEW_POWER_FLAG_F_BMP,
    NEW_SCROLL_BG_BMP,
    NEW_SCROLL_BLOCK_BMP,
    NEW_ITEM_L_FCS_BMP,
    NEW_ITEM_L_UFCS_BMP,

    POWER_THEME_MAX_ID,
} power_res_theme_e ;

typedef struct tag_res_theme_s
{
    __u32   bmp_id ;        //图片id
    HTHEME  bmp_handle ;    //图片资源句柄
    void   *p_buf ;     //图片资源buffer
} res_theme_t ;

H_WIN setting_power_win_create(H_WIN h_parent, setting_power_para_t *para);
__s32 setting_power_win_delete(H_WIN list_win);
#endif
